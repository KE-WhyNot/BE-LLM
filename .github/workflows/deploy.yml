name: Deploy to Cloud Run

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: asia-northeast3
  SERVICE_NAME: ai-service
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    # - name: Set up Python
    #   uses: actions/setup-python@v4
    #   with:
    #     python-version: '3.11'
    
    # - name: Install dependencies
    #   run: |
    #     python -m pip install --upgrade pip
    #     pip install -r requirements.txt
    
    # - name: Create smoke test
    #   run: |
    #     mkdir -p tests
    #     cat > tests/_smoke_test.py << 'PY'
    #     def test_smoke():
    #         assert True
    #     PY
    
    # - name: Run smoke tests
    #   run: |
    #     pytest -q tests/_smoke_test.py

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'
    
    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'
    
    - name: 'Configure Docker for Artifact Registry'
      run: 'gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev'
    
    - name: Define Image Tag
      run: |
        IMAGE="docker.io/${{ env.DOCKERHUB_USERNAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
        echo "IMAGE_NAME=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}" >> $GITHUB_ENV

    - name: 'Build Docker image'
      run: 'docker build -t "${{ env.IMAGE_NAME }}" .'
    
    - name: 'Push Docker image to Artifact Registry'
      run: 'docker push "${{ env.IMAGE_NAME }}"'
    
    - name: 'Deploy to Cloud Run!'
      run: |
        gcloud run deploy '${{ env.SERVICE_NAME }}' \
          --image '${{ env.IMAGE_NAME }}' \
          --platform 'managed' \
          --region '${{ env.REGION }}' \
          --no-allow-unauthenticated \
          --port 8000 \
          --timeout 600 \
          --min-instances 1