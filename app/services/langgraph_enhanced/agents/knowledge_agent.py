"""
ÏßÄÏãù ÏóêÏù¥Ï†ÑÌä∏
Í∏àÏúµ ÏßÄÏãù, Ïö©Ïñ¥ ÏÑ§Î™Ö, ÍµêÏú° Ï†ÑÎ¨∏ ÏóêÏù¥Ï†ÑÌä∏ (ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ Í∏∞Î∞ò ÏÑ∏Î∂ÑÌôî)
"""

from typing import Dict, Any, List, Optional
from .base_agent import BaseAgent
from app.services.pinecone_rag_service import search_pinecone, get_context_for_query
from app.services.pinecone_config import KNOWLEDGE_NAMESPACES, NAMESPACE_DESCRIPTIONS


class KnowledgeAgent(BaseAgent):
    """üìö ÏßÄÏãù ÏóêÏù¥Ï†ÑÌä∏ - Í∏àÏúµ ÍµêÏú° Ï†ÑÎ¨∏Í∞Ä (ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ ÎùºÏö∞ÌåÖ)"""
    
    def __init__(self):
        super().__init__(purpose="knowledge")
        self.agent_name = "knowledge_agent"
        
        # ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ Îß§Ìïë
        self.namespaces = KNOWLEDGE_NAMESPACES
        self.namespace_descriptions = NAMESPACE_DESCRIPTIONS
    
    def _load_knowledge_database(self) -> Dict[str, Dict[str, Any]]:
        """Í∏àÏúµ ÏßÄÏãù Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Î°úÎìú"""
        return {
            "PER": {
                "name": "Ï£ºÍ∞ÄÏàòÏùµÎπÑÏú® (Price-to-Earnings Ratio)",
                "definition": "Ï£ºÍ∞ÄÎ•º Ï£ºÎãπÏàúÏù¥Ïùµ(EPS)ÏúºÎ°ú ÎÇòÎàà Í∞íÏúºÎ°ú, Ï£ºÏãùÏùò ÏÉÅÎåÄÏ†Å Í∞ÄÏπòÎ•º ÌèâÍ∞ÄÌïòÎäî ÏßÄÌëúÏûÖÎãàÎã§.",
                "formula": "PER = Ï£ºÍ∞Ä √∑ Ï£ºÎãπÏàúÏù¥Ïùµ(EPS)",
                "interpretation": {
                    "ÎÇÆÏùå": "Ï£ºÏãùÏù¥ Ï†ÄÌèâÍ∞ÄÎêòÏóàÏùÑ Í∞ÄÎä•ÏÑ±Ïù¥ ÎÜíÏäµÎãàÎã§.",
                    "ÎÜíÏùå": "Ï£ºÏãùÏù¥ Í≥†ÌèâÍ∞ÄÎêòÏóàÏùÑ Í∞ÄÎä•ÏÑ±Ïù¥ ÎÜíÏäµÎãàÎã§.",
                    "Ï†ÅÏ†ï": "ÏãúÏû•ÏóêÏÑú Ìï©Î¶¨Ï†ÅÏúºÎ°ú ÌèâÍ∞ÄÎ∞õÍ≥† ÏûàÏäµÎãàÎã§."
                },
                "examples": [
                    "ÏÇºÏÑ±Ï†ÑÏûê Ï£ºÍ∞Ä 70,000Ïõê, EPS 5,000Ïõê ‚Üí PER = 14",
                    "ÎÑ§Ïù¥Î≤Ñ Ï£ºÍ∞Ä 200,000Ïõê, EPS 10,000Ïõê ‚Üí PER = 20"
                ],
                "related_terms": ["EPS", "PBR", "ROE", "Î∞∏Î•òÏóêÏù¥ÏÖò"],
                "usage": "Ìà¨Ïûê Ïãú Ï£ºÏãùÏùò ÏÉÅÎåÄÏ†Å Í∞ÄÏπòÎ•º ÌåêÎã®ÌïòÎäî Îç∞ ÏÇ¨Ïö©Îê©ÎãàÎã§."
            },
            "PBR": {
                "name": "Ï£ºÍ∞ÄÏàúÏûêÏÇ∞ÎπÑÏú® (Price-to-Book Ratio)",
                "definition": "Ï£ºÍ∞ÄÎ•º Ï£ºÎãπÏàúÏûêÏÇ∞(BPS)ÏúºÎ°ú ÎÇòÎàà Í∞íÏúºÎ°ú, ÏûêÏÇ∞ ÎåÄÎπÑ Ï£ºÏãùÏùò Í∞ÄÏπòÎ•º ÌèâÍ∞ÄÌïòÎäî ÏßÄÌëúÏûÖÎãàÎã§.",
                "formula": "PBR = Ï£ºÍ∞Ä √∑ Ï£ºÎãπÏàúÏûêÏÇ∞(BPS)",
                "interpretation": {
                    "ÎÇÆÏùå": "ÏûêÏÇ∞ ÎåÄÎπÑ Ï†ÄÌèâÍ∞ÄÎêòÏóàÏùÑ Í∞ÄÎä•ÏÑ±Ïù¥ ÎÜíÏäµÎãàÎã§.",
                    "ÎÜíÏùå": "ÏûêÏÇ∞ ÎåÄÎπÑ Í≥†ÌèâÍ∞ÄÎêòÏóàÏùÑ Í∞ÄÎä•ÏÑ±Ïù¥ ÎÜíÏäµÎãàÎã§.",
                    "1.0": "Ï£ºÍ∞ÄÍ∞Ä ÏàúÏûêÏÇ∞Í≥º ÎèôÏùºÌïú ÏàòÏ§ÄÏûÖÎãàÎã§."
                },
                "examples": [
                    "ÏÇºÏÑ±Ï†ÑÏûê Ï£ºÍ∞Ä 70,000Ïõê, BPS 50,000Ïõê ‚Üí PBR = 1.4",
                    "LGÌôîÌïô Ï£ºÍ∞Ä 400,000Ïõê, BPS 300,000Ïõê ‚Üí PBR = 1.33"
                ],
                "related_terms": ["BPS", "PER", "ROE", "ÏàúÏûêÏÇ∞"],
                "usage": "ÏûêÏÇ∞ Ï§ëÏã¨Ïùò Í∞ÄÏπò ÌèâÍ∞ÄÏóê ÏÇ¨Ïö©Îê©ÎãàÎã§."
            },
            "ROE": {
                "name": "ÏûêÍ∏∞ÏûêÎ≥∏Ïù¥ÏùµÎ•† (Return on Equity)",
                "definition": "Í∏∞ÏóÖÏù¥ ÏûêÍ∏∞ÏûêÎ≥∏ÏùÑ ÏñºÎßàÎÇò Ìö®Ïú®Ï†ÅÏúºÎ°ú ÌôúÏö©ÌïòÏó¨ Ïù¥ÏùµÏùÑ Ï∞ΩÏ∂úÌïòÎäîÏßÄÎ•º Î≥¥Ïó¨Ï£ºÎäî ÏßÄÌëúÏûÖÎãàÎã§.",
                "formula": "ROE = ÎãπÍ∏∞ÏàúÏù¥Ïùµ √∑ ÏûêÍ∏∞ÏûêÎ≥∏ √ó 100",
                "interpretation": {
                    "ÎÜíÏùå": "ÏûêÍ∏∞ÏûêÎ≥∏ÏùÑ Ìö®Ïú®Ï†ÅÏúºÎ°ú ÌôúÏö©ÌïòÍ≥† ÏûàÏäµÎãàÎã§.",
                    "ÎÇÆÏùå": "ÏûêÍ∏∞ÏûêÎ≥∏ ÌôúÏö© Ìö®Ïú®ÏÑ±Ïù¥ ÎÇÆÏäµÎãàÎã§.",
                    "15% Ïù¥ÏÉÅ": "Ïö∞ÏàòÌïú ÏàòÏùµÏÑ±ÏùÑ Î≥¥Ïó¨Ï§çÎãàÎã§."
                },
                "examples": [
                    "ÎãπÍ∏∞ÏàúÏù¥Ïùµ 1,000ÏñµÏõê, ÏûêÍ∏∞ÏûêÎ≥∏ 5,000ÏñµÏõê ‚Üí ROE = 20%",
                    "ÎãπÍ∏∞ÏàúÏù¥Ïùµ 500ÏñµÏõê, ÏûêÍ∏∞ÏûêÎ≥∏ 10,000ÏñµÏõê ‚Üí ROE = 5%"
                ],
                "related_terms": ["PER", "PBR", "ROA", "ÏûêÍ∏∞ÏûêÎ≥∏"],
                "usage": "Í∏∞ÏóÖÏùò ÏàòÏùµÏÑ±Í≥º Í≤ΩÏòÅ Ìö®Ïú®ÏÑ±ÏùÑ ÌèâÍ∞ÄÌïòÎäî Îç∞ ÏÇ¨Ïö©Îê©ÎãàÎã§."
            },
            "EPS": {
                "name": "Ï£ºÎãπÏàúÏù¥Ïùµ (Earnings Per Share)",
                "definition": "Í∏∞ÏóÖÏùò ÏàúÏù¥ÏùµÏùÑ Î∞úÌñâÏ£ºÏãù ÏàòÎ°ú ÎÇòÎàà Í∞íÏúºÎ°ú, Ï£ºÏãù 1Ï£ºÎãπ ÏñºÎßàÏùò Ïù¥ÏùµÏùÑ ÎÉàÎäîÏßÄ Î≥¥Ïó¨Ï§çÎãàÎã§.",
                "formula": "EPS = ÎãπÍ∏∞ÏàúÏù¥Ïùµ √∑ Î∞úÌñâÏ£ºÏãù Ïàò",
                "interpretation": {
                    "Ï¶ùÍ∞Ä": "Í∏∞ÏóÖÏùò ÏàòÏùµÏÑ±Ïù¥ Í∞úÏÑ†ÎêòÍ≥† ÏûàÏäµÎãàÎã§.",
                    "Í∞êÏÜå": "Í∏∞ÏóÖÏùò ÏàòÏùµÏÑ±Ïù¥ ÏïÖÌôîÎêòÍ≥† ÏûàÏäµÎãàÎã§.",
                    "ÎÜíÏùå": "Ï£ºÏ£ºÏóêÍ≤å Îçî ÎßéÏùÄ Ïù¥ÏùµÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§."
                },
                "examples": [
                    "ÎãπÍ∏∞ÏàúÏù¥Ïùµ 10Ï°∞Ïõê, Î∞úÌñâÏ£ºÏãù 5ÏñµÏ£º ‚Üí EPS = 20,000Ïõê",
                    "ÎãπÍ∏∞ÏàúÏù¥Ïùµ 5Ï°∞Ïõê, Î∞úÌñâÏ£ºÏãù 10ÏñµÏ£º ‚Üí EPS = 5,000Ïõê"
                ],
                "related_terms": ["PER", "Ï£ºÍ∞Ä", "ÏàúÏù¥Ïùµ", "Ï£ºÏãùÏàò"],
                "usage": "Ï£ºÏãùÏùò Í∏∞Î≥∏Ï†Å Í∞ÄÏπòÎ•º ÌèâÍ∞ÄÌïòÎäî Îç∞ ÏÇ¨Ïö©Îê©ÎãàÎã§."
            },
            "Î∂ÑÏÇ∞Ìà¨Ïûê": {
                "name": "Î∂ÑÏÇ∞Ìà¨Ïûê (Diversification)",
                "definition": "Ìà¨Ïûê Î¶¨Ïä§ÌÅ¨Î•º Ï§ÑÏù¥Í∏∞ ÏúÑÌï¥ Ïó¨Îü¨ Ï¢ÖÎ™©Ïù¥ÎÇò ÏûêÏÇ∞Ïóê Ìà¨ÏûêÌïòÎäî Ï†ÑÎûµÏûÖÎãàÎã§.",
                "principles": [
                    "Ìïú Ï¢ÖÎ™©Ïóê Î™®Îì† ÏûêÍ∏àÏùÑ Ìà¨ÏûêÌïòÏßÄ ÏïäÍ∏∞",
                    "Îã§ÏñëÌïú ÏóÖÏ¢ÖÍ≥º ÏãúÏû•Ïóê Ìà¨ÏûêÌïòÍ∏∞",
                    "ÏãúÍ∞ÑÏ†Å Î∂ÑÏÇ∞ÏúºÎ°ú Îß§Ïàò ÌÉÄÏù¥Î∞ç Ï°∞Ï†àÌïòÍ∏∞"
                ],
                "benefits": [
                    "Í∞úÎ≥Ñ Ï¢ÖÎ™© Î¶¨Ïä§ÌÅ¨ Í∞êÏÜå",
                    "Ï†ÑÏ≤¥ Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏïàÏ†ïÏÑ± Ìñ•ÏÉÅ",
                    "Ïû•Í∏∞Ï†Å ÏàòÏùµÎ•† ÏïàÏ†ïÌôî"
                ],
                "examples": [
                    "ÏÇºÏÑ±Ï†ÑÏûê 30%, ÎÑ§Ïù¥Î≤Ñ 20%, Ïπ¥Ïπ¥Ïò§ 20%, ÌòÑÎåÄÏ∞® 15%, Í∏∞ÌÉÄ 15%",
                    "Ï£ºÏãù 60%, Ï±ÑÍ∂å 30%, ÌòÑÍ∏à 10%"
                ],
                "related_terms": ["Ìè¨Ìä∏Ìè¥Î¶¨Ïò§", "Î¶¨Ïä§ÌÅ¨ Í¥ÄÎ¶¨", "ÏûêÏÇ∞Î∞∞Î∂Ñ"],
                "usage": "Ìà¨Ïûê Î¶¨Ïä§ÌÅ¨Î•º Í¥ÄÎ¶¨ÌïòÎäî Í∏∞Î≥∏Ï†ÅÏù∏ Ìà¨Ïûê Ï†ÑÎûµÏûÖÎãàÎã§."
            },
            "Í∏∞Ïà†Ï†ÅÎ∂ÑÏÑù": {
                "name": "Í∏∞Ïà†Ï†Å Î∂ÑÏÑù (Technical Analysis)",
                "definition": "Ï£ºÍ∞ÄÏôÄ Í±∞ÎûòÎüâ Îì± ÏãúÏû• Îç∞Ïù¥ÌÑ∞Î•º Î∂ÑÏÑùÌïòÏó¨ ÎØ∏Îûò Ï£ºÍ∞Ä ÏõÄÏßÅÏûÑÏùÑ ÏòàÏ∏°ÌïòÎäî Î∞©Î≤ïÏûÖÎãàÎã§.",
                "main_indicators": [
                    "Ïù¥ÎèôÌèâÍ∑†ÏÑ† (MA)",
                    "RSI (ÏÉÅÎåÄÍ∞ïÎèÑÏßÄÏàò)",
                    "MACD",
                    "Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú",
                    "Ïä§ÌÜ†Ï∫êÏä§Ìã±"
                ],
                "principles": [
                    "Ï£ºÍ∞ÄÎäî Î™®Îì† Ï†ïÎ≥¥Î•º Î∞òÏòÅÌïúÎã§",
                    "Ï£ºÍ∞ÄÎäî Ï∂îÏÑ∏Î•º Îî∞Îùº ÏõÄÏßÅÏù∏Îã§",
                    "Ïó≠ÏÇ¨Îäî Î∞òÎ≥µÎêúÎã§"
                ],
                "usage": "Îã®Í∏∞ Ìà¨ÏûêÎÇò Îß§Îß§ ÌÉÄÏù¥Î∞ç Í≤∞Ï†ïÏóê ÌôúÏö©Îê©ÎãàÎã§.",
                "related_terms": ["Ï∞®Ìä∏ Î∂ÑÏÑù", "Ï∂îÏÑ∏ Î∂ÑÏÑù", "ÏßÄÏßÄÏÑ†", "Ï†ÄÌï≠ÏÑ†"],
                "limitations": "Í∏∞Ïà†Ï†Å Î∂ÑÏÑùÎßåÏúºÎ°úÎäî ÏôÑÎ≤ΩÌïú ÏòàÏ∏°Ïù¥ Î∂àÍ∞ÄÎä•Ìï©ÎãàÎã§."
            }
        }
    
    def get_prompt_template(self) -> str:
        """ÏßÄÏãù Î∂ÑÏÑù Ï†ÑÎûµ Í≤∞Ï†ï ÌîÑÎ°¨ÌîÑÌä∏ ÌÖúÌîåÎ¶ø"""
        return """ÎãπÏã†ÏùÄ Í∏àÏúµ ÍµêÏú° Ï†ÑÎ¨∏Í∞ÄÏûÖÎãàÎã§. ÏÇ¨Ïö©Ïûê ÏöîÏ≤≠Ïóê Îî∞Îùº ÏµúÏ†ÅÏùò ÍµêÏú° Ï†ÑÎûµÏùÑ Í≤∞Ï†ïÌï¥Ï£ºÏÑ∏Ïöî.

## ÏÇ¨Ïö©Ïûê ÏöîÏ≤≠
"{user_query}"

## ÏøºÎ¶¨ Î∂ÑÏÑù Í≤∞Í≥º
- Ï£ºÏöî ÏùòÎèÑ: {primary_intent}
- Î≥µÏû°ÎèÑ: {complexity_level}
- ÌïÑÏöî ÏÑúÎπÑÏä§: {required_services}

## ÍµêÏú° Ï†ÑÎûµ Í≤∞Ï†ï
Îã§Ïùå ÌòïÏãùÏúºÎ°ú ÏùëÎãµÌï¥Ï£ºÏÑ∏Ïöî:

education_type: [ÍµêÏú° Ïú†Ìòï - concept/example/application/strategy/glossary Ï§ë ÌïòÎÇò]
difficulty_level: [ÎÇúÏù¥ÎèÑ - beginner/intermediate/advanced]
focus_area: [ÏßëÏ§ë ÏòÅÏó≠ - basic/advanced/strategic/practical]
explanation_style: [ÏÑ§Î™Ö Ïä§ÌÉÄÏùº - simple/detailed/comprehensive]
include_examples: [ÏòàÏãú Ìè¨Ìï® - yes/no]
include_formulas: [Í≥µÏãù Ìè¨Ìï® - yes/no]
related_topics: [Í¥ÄÎ†® Ï£ºÏ†ú Ìè¨Ìï® - yes/no]

## Ï†ÑÎûµ ÏòàÏãú

ÏöîÏ≤≠: "PERÏù¥ Î≠êÏïº?"
education_type: concept
difficulty_level: beginner
focus_area: basic
explanation_style: simple
include_examples: yes
include_formulas: yes
related_topics: yes

ÏöîÏ≤≠: "Î∂ÑÏÇ∞Ìà¨Ïûê Ï†ÑÎûµ ÏïåÎ†§Ï§ò"
education_type: strategy
difficulty_level: intermediate
focus_area: practical
explanation_style: detailed
include_examples: yes
include_formulas: no
related_topics: yes

ÏöîÏ≤≠: "Í∏∞Ïà†Ï†Å Î∂ÑÏÑù Í≥†Í∏â Í∏∞Î≤ï"
education_type: application
difficulty_level: advanced
focus_area: advanced
explanation_style: comprehensive
include_examples: yes
include_formulas: yes
related_topics: yes

## ÏùëÎãµ ÌòïÏãù
education_type: [Í∞í]
difficulty_level: [Í∞í]
focus_area: [Í∞í]
explanation_style: [Í∞í]
include_examples: [Í∞í]
include_formulas: [Í∞í]
related_topics: [Í∞í]"""
    
    def parse_education_strategy(self, response_text: str) -> Dict[str, Any]:
        """ÍµêÏú° Ï†ÑÎûµ ÌååÏã±"""
        try:
            lines = response_text.strip().split('\n')
            result = {}
            
            for line in lines:
                if ':' in line:
                    key, value = line.split(':', 1)
                    key = key.strip()
                    value = value.strip()
                    
                    if key == 'education_type':
                        result['education_type'] = value
                    elif key == 'difficulty_level':
                        result['difficulty_level'] = value
                    elif key == 'focus_area':
                        result['focus_area'] = value
                    elif key == 'explanation_style':
                        result['explanation_style'] = value
                    elif key == 'include_examples':
                        result['include_examples'] = value.lower() == 'yes'
                    elif key == 'include_formulas':
                        result['include_formulas'] = value.lower() == 'yes'
                    elif key == 'related_topics':
                        result['related_topics'] = value.lower() == 'yes'
            
            # Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
            result.setdefault('education_type', 'concept')
            result.setdefault('difficulty_level', 'beginner')
            result.setdefault('focus_area', 'basic')
            result.setdefault('explanation_style', 'simple')
            result.setdefault('include_examples', True)
            result.setdefault('include_formulas', True)
            result.setdefault('related_topics', True)
            
            return result
            
        except Exception as e:
            print(f"‚ùå ÍµêÏú° Ï†ÑÎûµ ÌååÏã± Ïò§Î•ò: {e}")
            return {
                'education_type': 'concept',
                'difficulty_level': 'beginner',
                'focus_area': 'basic',
                'explanation_style': 'simple',
                'include_examples': True,
                'include_formulas': True,
                'related_topics': True
            }
    
    def generate_knowledge_explanation_prompt(self, concept: str, knowledge_data: Dict[str, Any], strategy: Dict[str, Any], user_query: str) -> str:
        """ÏßÄÏãù ÏÑ§Î™Ö ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ±"""
        return f"""ÎãπÏã†ÏùÄ {strategy.get('difficulty_level', 'beginner')} ÏàòÏ§ÄÏùò Í∏àÏúµ ÍµêÏú° Ï†ÑÎ¨∏Í∞ÄÏûÖÎãàÎã§.
{strategy.get('explanation_style', 'simple')}Ìïú ÏÑ§Î™ÖÏùÑ Ï†úÍ≥µÌï¥Ï£ºÏÑ∏Ïöî.

## ÏÇ¨Ïö©Ïûê ÏöîÏ≤≠
"{user_query}"

## ÍµêÏú° Ï†ÑÎûµ
- ÍµêÏú° Ïú†Ìòï: {strategy.get('education_type', 'concept')}
- ÎÇúÏù¥ÎèÑ: {strategy.get('difficulty_level', 'beginner')}
- ÏßëÏ§ë ÏòÅÏó≠: {strategy.get('focus_area', 'basic')}
- ÏÑ§Î™Ö Ïä§ÌÉÄÏùº: {strategy.get('explanation_style', 'simple')}
- ÏòàÏãú Ìè¨Ìï®: {'Ïòà' if strategy.get('include_examples', True) else 'ÏïÑÎãàÏò§'}
- Í≥µÏãù Ìè¨Ìï®: {'Ïòà' if strategy.get('include_formulas', True) else 'ÏïÑÎãàÏò§'}
- Í¥ÄÎ†® Ï£ºÏ†ú: {'Ïòà' if strategy.get('related_topics', True) else 'ÏïÑÎãàÏò§'}

## Í∞úÎÖê Ï†ïÎ≥¥
{self._format_knowledge_data(concept, knowledge_data, strategy)}

## ÏÑ§Î™Ö ÏöîÏ≤≠ÏÇ¨Ìï≠

### 1. üìö Í∏∞Î≥∏ Í∞úÎÖê ÏÑ§Î™Ö
- **Ï†ïÏùò**: Î™ÖÌôïÌïòÍ≥† Ïù¥Ìï¥ÌïòÍ∏∞ Ïâ¨Ïö¥ Ï†ïÏùò
- **ÌïµÏã¨ Ìè¨Ïù∏Ìä∏**: Ï§ëÏöîÌïú ÌäπÏßï 3-5Í∞ú
- **Ïôú Ï§ëÏöîÌïúÍ∞Ä**: Ìà¨ÏûêÏóêÏÑúÏùò Ï§ëÏöîÏÑ±

### 2. üí° Íµ¨Ï≤¥Ï†Å ÏÑ§Î™Ö
- **ÏûëÎèô ÏõêÎ¶¨**: Ïñ¥ÎñªÍ≤å ÏûëÎèôÌïòÎäîÏßÄ Îã®Í≥ÑÎ≥Ñ ÏÑ§Î™Ö
- **ÌôúÏö© Î∞©Î≤ï**: Ïã§Ï†úÎ°ú Ïñ¥ÎñªÍ≤å ÏÇ¨Ïö©ÌïòÎäîÏßÄ
- **Ìï¥ÏÑù Î∞©Î≤ï**: Í≤∞Í≥ºÎ•º Ïñ¥ÎñªÍ≤å Ïù¥Ìï¥Ìï¥Ïïº ÌïòÎäîÏßÄ

### 3. üìä Ïã§Ïö©Ï†Å ÏòàÏãú
- **Ïã§Ï†ú ÏÇ¨Î°Ä**: Íµ¨Ï≤¥Ï†ÅÏù∏ Ïà´ÏûêÏôÄ Ìï®Íªò ÏÑ§Î™Ö
- **Í≥ÑÏÇ∞ Î∞©Î≤ï**: Îã®Í≥ÑÎ≥Ñ Í≥ÑÏÇ∞ Í≥ºÏ†ï
- **ÎπÑÍµê Î∂ÑÏÑù**: Îã§Î•∏ ÏßÄÌëúÏôÄÏùò ÎπÑÍµê

### 4. üéØ Ìà¨Ïûê ÌôúÏö©Î≤ï
- **Ìà¨Ïûê Í≤∞Ï†ï**: Ïñ¥Îñ§ Ìà¨Ïûê Í≤∞Ï†ïÏóê ÎèÑÏõÄÏù¥ ÎêòÎäîÏßÄ
- **Ï£ºÏùòÏÇ¨Ìï≠**: ÏÇ¨Ïö©Ìï† Îïå Ï£ºÏùòÌï¥Ïïº Ìï† Ï†ê
- **ÌïúÍ≥ÑÏ†ê**: Ïù¥ ÏßÄÌëúÏùò ÌïúÍ≥ÑÏôÄ Îã®Ï†ê

### 5. üîó Í¥ÄÎ†® Í∞úÎÖê
- **Ïó∞Í¥Ä ÏßÄÌëú**: Ìï®Íªò Î≥¥Î©¥ Ï¢ãÏùÄ Îã§Î•∏ ÏßÄÌëúÎì§
- **Ïã¨Ìôî ÌïôÏäµ**: Îçî Î∞∞Ïö∞Î©¥ Ï¢ãÏùÑ ÎÇ¥Ïö©
- **Ïã§Î¨¥ ÌôúÏö©**: Ïã§Ï†ú Ìà¨ÏûêÏóêÏÑúÏùò ÌôúÏö©Î≤ï

## ÏùëÎãµ ÌòïÏãù
Í∞Å ÏÑπÏÖòÎ≥ÑÎ°ú Ïù¥Î™®ÏßÄÏôÄ Ìï®Íªò Íµ¨Ï°∞ÌôîÌïòÏó¨ ÏûëÏÑ±ÌïòÏÑ∏Ïöî.
{strategy.get('difficulty_level', 'beginner')} ÏàòÏ§ÄÏóê ÎßûÎäî Ïö©Ïñ¥ÏôÄ ÏÑ§Î™ÖÏùÑ ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî.

## ÍµêÏú° ÏõêÏπô
- Î≥µÏû°Ìïú ÎÇ¥Ïö©ÎèÑ ÏâΩÍ≤å ÏÑ§Î™Ö
- Íµ¨Ï≤¥Ï†ÅÏù∏ ÏòàÏãúÏôÄ Ïà´Ïûê ÏÇ¨Ïö©
- Ïã§Ïö©Ï†ÅÏù¥Í≥† ÌòÑÏã§Ï†ÅÏù∏ Ï°∞Ïñ∏ Ï†úÍ≥µ"""
    
    def _format_knowledge_data(self, concept: str, knowledge_data: Dict[str, Any], strategy: Dict[str, Any]) -> str:
        """ÏßÄÏãù Îç∞Ïù¥ÌÑ∞ Ìè¨Îß∑ÌåÖ"""
        if not knowledge_data:
            return f"{concept}Ïóê ÎåÄÌïú Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§."
        
        formatted = []
        formatted.append(f"**{knowledge_data.get('name', concept)}**")
        formatted.append(f"Ï†ïÏùò: {knowledge_data.get('definition', 'Ï†ïÏùò ÏóÜÏùå')}")
        
        if strategy.get('include_formulas', True) and 'formula' in knowledge_data:
            formatted.append(f"Í≥µÏãù: {knowledge_data['formula']}")
        
        if 'interpretation' in knowledge_data:
            formatted.append("Ìï¥ÏÑù:")
            for key, value in knowledge_data['interpretation'].items():
                formatted.append(f"  ‚Ä¢ {key}: {value}")
        
        if strategy.get('include_examples', True) and 'examples' in knowledge_data:
            formatted.append("ÏòàÏãú:")
            for example in knowledge_data['examples']:
                formatted.append(f"  ‚Ä¢ {example}")
        
        if knowledge_data.get('usage'):
            formatted.append(f"ÌôúÏö©: {knowledge_data['usage']}")
        
        if strategy.get('related_topics', True) and 'related_terms' in knowledge_data:
            formatted.append(f"Í¥ÄÎ†® Ïö©Ïñ¥: {', '.join(knowledge_data['related_terms'])}")
        
        return "\n".join(formatted)
    
    def _determine_namespace(self, user_query: str, query_analysis: Dict[str, Any]) -> str:
        """ÏøºÎ¶¨ Î∂ÑÏÑùÏùÑ ÌÜµÌï¥ Ï†ÅÏ†àÌïú ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ Í≤∞Ï†ï"""
        
        # LLM Í∏∞Î∞ò ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ Î∂ÑÎ•ò
        classification_prompt = f"""ÎãπÏã†ÏùÄ Í∏àÏúµ ÏßàÎ¨∏ÏùÑ Î∂ÑÏÑùÌïòÏó¨ Ï†ÅÏ†àÌïú ÏßÄÏãù Ïπ¥ÌÖåÍ≥†Î¶¨Î•º Í≤∞Ï†ïÌïòÎäî Ï†ÑÎ¨∏Í∞ÄÏûÖÎãàÎã§.

ÏÇ¨Ïö©Ïûê ÏßàÎ¨∏: "{user_query}"

Îã§Ïùå Ïπ¥ÌÖåÍ≥†Î¶¨ Ï§ë Í∞ÄÏû• Ï†ÅÌï©Ìïú Í≤ÉÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî:

1. **terminology** (Ïö©Ïñ¥): Í∏àÏúµ Ïö©Ïñ¥Ïùò Ï†ïÏùò, Í∞úÎÖê ÏÑ§Î™Ö, "~Ïù¥ Î≠êÏïº?", "~ÎûÄ?" Îì±Ïùò ÏßàÎ¨∏
   - Ïòà: "PERÏù¥ Î≠êÏïº?", "ROEÎûÄ Î¨¥ÏóáÏù∏Í∞ÄÏöî?", "Î∂ÑÏÇ∞Ìà¨ÏûêÏùò ÏùòÎØ∏Îäî?"
   - ÌÇ§ÏõåÎìú: Î≠êÏïº, Î¨¥Ïóá, ÏùòÎØ∏, Ï†ïÏùò, Í∞úÎÖê, ÎûÄ, Ïù¥ÎûÄ
   
2. **financial_analysis** (Ïû¨Î¨¥Î∂ÑÏÑù): Ïû¨Î¨¥Ï†úÌëú Î∂ÑÏÑù, Í≤ΩÏ†ú ÎèôÌñ•, Í∏∞ÏóÖ Ïã§Ï†Å, Ïû¨Î¨¥ ÏßÄÌëú Ìï¥ÏÑù
   - Ïòà: "Ïû¨Î¨¥Ï†úÌëú Î≥¥Îäî Î≤ï", "PER Î∂ÑÏÑù Î∞©Î≤ï", "Í≤ΩÏ†ú ÎèôÌñ• Î∂ÑÏÑù", "Í∏∞ÏóÖ Ïã§Ï†Å ÌèâÍ∞Ä"
   - ÌÇ§ÏõåÎìú: Ïû¨Î¨¥Ï†úÌëú, Í≤ΩÏ†ú ÎèôÌñ•, Î∂ÑÏÑù Î∞©Î≤ï, Ïã§Ï†Å, Ïû¨Î¨¥ ÏßÄÌëú
   
3. **youth_policy** (Ï≤≠ÎÖÑÏ†ïÏ±Ö): Ï≤≠ÎÖÑ Í∏àÏúµ ÏßÄÏõê, Ï†ïÎ∂Ä Ï†ïÏ±Ö, Ï≤≠ÎÖÑ ÌòúÌÉù, Ï≤≠ÎÖÑ ÎåÄÏÉÅ Í∏àÏúµÏÉÅÌíà
   - Ïòà: "Ï≤≠ÎÖÑ ÎåÄÏ∂ú Ï†ïÏ±Ö", "Ï≤≠ÎÖÑ Ï†ÄÏ∂ï Í≥ÑÏ¢å", "Ï≤≠ÎÖÑ ÏßÄÏõêÍ∏à", "Ï≤≠ÎÖÑ Ïö∞ÎåÄ Í∏àÎ¶¨"
   - ÌÇ§ÏõåÎìú: Ï≤≠ÎÖÑ, Ï≤≠ÎÖÑÎåÄÏÉÅ, Ï≤≠ÎÖÑÏßÄÏõê, Ï≤≠ÎÖÑÏö∞ÎåÄ, Ï≤≠ÎÖÑÏ†ïÏ±Ö
   
4. **general** (ÏùºÎ∞ò): Ìà¨Ïûê Ï†ÑÎûµ, Î¶¨Ïä§ÌÅ¨ Í¥ÄÎ¶¨, Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Íµ¨ÏÑ±, ÏùºÎ∞ò Í∏àÏúµ ÏßÄÏãù
   - Ïòà: "Ìà¨Ïûê Ï†ÑÎûµ", "Î¶¨Ïä§ÌÅ¨ Í¥ÄÎ¶¨ Î∞©Î≤ï", "Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Íµ¨ÏÑ±Î≤ï"
   - ÌÇ§ÏõåÎìú: Ìà¨Ïûê Ï†ÑÎûµ, Î¶¨Ïä§ÌÅ¨, Ìè¨Ìä∏Ìè¥Î¶¨Ïò§, ÏûêÏÇ∞ Î∞∞Î∂Ñ

**Ï§ëÏöî**: "Ï≤≠ÎÖÑ"Ïù¥ÎùºÎäî Îã®Ïñ¥Í∞Ä Ìè¨Ìï®ÎêòÏñ¥ ÏûàÏúºÎ©¥ Î∞òÎìúÏãú **youth_policy**Î°ú Î∂ÑÎ•òÌïòÏÑ∏Ïöî!

Îã§Ïùå ÌòïÏãùÏúºÎ°úÎßå ÏùëÎãµÌïòÏÑ∏Ïöî:
category: [terminology/financial_analysis/youth_policy/general]
confidence: [0.0-1.0]
reasoning: [ÏÑ†ÌÉùÌïú Ïù¥Ïú†]"""

        try:
            response = self.llm.invoke(classification_prompt)
            response_text = response.content.strip()
            
            # ÌååÏã±
            category = "general"  # Í∏∞Î≥∏Í∞í
            for line in response_text.split('\n'):
                if line.startswith('category:'):
                    category = line.split(':', 1)[1].strip()
                    break
            
            # Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
            if category not in self.namespaces:
                category = "general"
            
            namespace = self.namespaces[category]
            self.log(f"ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ Í≤∞Ï†ï: {category} -> {namespace}")
            
            return namespace
            
        except Exception as e:
            self.log(f"ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ Í≤∞Ï†ï Ïò§Î•ò: {e}, Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©")
            return self.namespaces["general"]
    
    def _get_rag_context(self, user_query: str, namespace: str, top_k: int = 5) -> str:
        """ÌäπÏ†ï ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ÏóêÏÑú RAG Ïª®ÌÖçÏä§Ìä∏ Í∞ÄÏ†∏Ïò§Í∏∞"""
        try:
            self.log(f"RAG Í≤ÄÏÉâ ÏãúÏûë: {namespace} (top_k={top_k})")
            
            # PineconeÏóêÏÑú Í≤ÄÏÉâ
            context = get_context_for_query(
                query=user_query,
                top_k=top_k,
                namespace=namespace
            )
            
            if context and len(context) > 0:
                self.log(f"RAG Ïª®ÌÖçÏä§Ìä∏ Î∞úÍ≤¨: {len(context)} Í∏ÄÏûê")
                return context
            else:
                self.log("RAG Ïª®ÌÖçÏä§Ìä∏ ÏóÜÏùå")
                return ""
                
        except Exception as e:
            self.log(f"RAG Í≤ÄÏÉâ Ïò§Î•ò: {e}")
            return ""
    
    def process(self, user_query: str, query_analysis: Dict[str, Any]) -> Dict[str, Any]:
        """ÏßÄÏãù ÏóêÏù¥Ï†ÑÌä∏ Ï≤òÎ¶¨ (ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ ÎùºÏö∞ÌåÖ)"""
        try:
            self.log(f"ÏßÄÏãù ÍµêÏú° ÏãúÏûë: {user_query}")
            
            # 1. ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ Í≤∞Ï†ï
            namespace = self._determine_namespace(user_query, query_analysis)
            
            # 2. RAG Ïª®ÌÖçÏä§Ìä∏ Í∞ÄÏ†∏Ïò§Í∏∞
            rag_context = self._get_rag_context(user_query, namespace, top_k=5)
            
            # 3. LLMÏù¥ ÍµêÏú° Ï†ÑÎûµ Í≤∞Ï†ï
            prompt = self.get_prompt_template().format(
                user_query=user_query,
                primary_intent=query_analysis.get('primary_intent', 'knowledge'),
                complexity_level=query_analysis.get('complexity_level', 'simple'),
                required_services=query_analysis.get('required_services', [])
            )
            
            response = self.llm.invoke(prompt)
            strategy = self.parse_education_strategy(response.content.strip())
            
            # 4. RAG Ïª®ÌÖçÏä§Ìä∏ Í∏∞Î∞ò ÏÑ§Î™Ö ÏÉùÏÑ±
            if rag_context:
                explanation_prompt = f"""ÎãπÏã†ÏùÄ {strategy.get('difficulty_level', 'beginner')} ÏàòÏ§ÄÏùò Í∏àÏúµ ÍµêÏú° Ï†ÑÎ¨∏Í∞ÄÏûÖÎãàÎã§.

## ÏÇ¨Ïö©Ïûê ÏßàÎ¨∏
"{user_query}"

## Í¥ÄÎ†® ÏßÄÏãù (ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§: {namespace})
{rag_context}

## ÍµêÏú° Ï†ÑÎûµ
- ÎÇúÏù¥ÎèÑ: {strategy.get('difficulty_level', 'beginner')}
- ÏÑ§Î™Ö Ïä§ÌÉÄÏùº: {strategy.get('explanation_style', 'simple')}
- ÏòàÏãú Ìè¨Ìï®: {'Ïòà' if strategy.get('include_examples', True) else 'ÏïÑÎãàÏò§'}

## ÏùëÎãµ ÏöîÍµ¨ÏÇ¨Ìï≠
1. ÏúÑÏùò Í¥ÄÎ†® ÏßÄÏãùÏùÑ Î∞îÌÉïÏúºÎ°ú ÏÇ¨Ïö©ÏûêÏùò ÏßàÎ¨∏Ïóê ÎãµÎ≥ÄÌïòÏÑ∏Ïöî
2. {strategy.get('explanation_style', 'simple')}Ìïú ÏÑ§Î™Ö Ïä§ÌÉÄÏùºÏùÑ Ïú†ÏßÄÌïòÏÑ∏Ïöî
3. ÎÇúÏù¥ÎèÑ {strategy.get('difficulty_level', 'beginner')}Ïóê ÎßûÍ≤å ÏÑ§Î™ÖÌïòÏÑ∏Ïöî
4. Ïã§Ï†ú ÏòàÏãúÎ•º Ìè¨Ìï®ÌïòÏó¨ Ïù¥Ìï¥ÌïòÍ∏∞ ÏâΩÍ≤å ÏÑ§Î™ÖÌïòÏÑ∏Ïöî
5. Ìà¨ÏûêÏóê Ïã§ÏßàÏ†ÅÏúºÎ°ú ÎèÑÏõÄÏù¥ ÎêòÎäî ÎÇ¥Ïö©ÏùÑ Ï†úÍ≥µÌïòÏÑ∏Ïöî

Î™ÖÌôïÌïòÍ≥† Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî."""
                
                explanation_response = self.llm.invoke(explanation_prompt)
                explanation_result = explanation_response.content
                
                self.log(f"RAG Í∏∞Î∞ò ÏßÄÏãù ÍµêÏú° ÏôÑÎ£å")
            else:
                # RAG Ïª®ÌÖçÏä§Ìä∏Í∞Ä ÏóÜÎäî Í≤ΩÏö∞ ÏùºÎ∞ò ÏÑ§Î™Ö
                explanation_result = self._generate_general_explanation(user_query, strategy)
                self.log(f"ÏùºÎ∞ò ÏßÄÏãù ÏÑ§Î™Ö ÏôÑÎ£å")
            
            return {
                'success': True,
                'namespace': namespace,
                'rag_context_length': len(rag_context),
                'explanation_result': explanation_result,
                'strategy': strategy
            }
            
        except Exception as e:
            self.log(f"ÏßÄÏãù ÏóêÏù¥Ï†ÑÌä∏ Ïò§Î•ò: {e}")
            import traceback
            traceback.print_exc()
            return {
                'success': False,
                'error': f"ÏßÄÏãù ÍµêÏú° Ï§ë Ïò§Î•ò: {str(e)}",
                'explanation_result': "ÏßÄÏãù ÏÑ§Î™ÖÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî."
            }
    
    def _extract_concept(self, query: str) -> str:
        """ÏøºÎ¶¨ÏóêÏÑú Í∞úÎÖê Ï∂îÏ∂ú"""
        # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïùò ÌÇ§ÏõåÎìúÎì§Í≥º Îß§Ïπ≠
        for concept in self.knowledge_db.keys():
            if concept in query:
                return concept
        
        # Ï∂îÍ∞Ä ÌÇ§ÏõåÎìú Îß§Ïπ≠
        keyword_mapping = {
            'Ï£ºÍ∞ÄÏàòÏùµÎπÑÏú®': 'PER',
            'Ï£ºÍ∞ÄÏàúÏûêÏÇ∞ÎπÑÏú®': 'PBR', 
            'ÏûêÍ∏∞ÏûêÎ≥∏Ïù¥ÏùµÎ•†': 'ROE',
            'Ï£ºÎãπÏàúÏù¥Ïùµ': 'EPS',
            'Í∏∞Ïà†Ï†Å Î∂ÑÏÑù': 'Í∏∞Ïà†Ï†ÅÎ∂ÑÏÑù',
            'Ï∞®Ìä∏ Î∂ÑÏÑù': 'Í∏∞Ïà†Ï†ÅÎ∂ÑÏÑù',
            'Î∂ÑÏÇ∞ Ìà¨Ïûê': 'Î∂ÑÏÇ∞Ìà¨Ïûê'
        }
        
        for keyword, concept in keyword_mapping.items():
            if keyword in query:
                return concept
        
        return "ÏùºÎ∞ò"
    
    def _generate_general_explanation(self, query: str, strategy: Dict[str, Any]) -> str:
        """ÏùºÎ∞òÏ†ÅÏù∏ ÏßÄÏãù ÏÑ§Î™Ö ÏÉùÏÑ±"""
        return f"""üìö **Í∏àÏúµ ÏßÄÏãù ÏïàÎÇ¥**

"{query}"Ïóê ÎåÄÌïú ÏßàÎ¨∏ÏùÑ Ï£ºÏÖ®ÎÑ§Ïöî. 

ÌòÑÏû¨ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÏóêÏÑú Ìï¥Îãπ Í∞úÎÖêÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏñ¥ Íµ¨Ï≤¥Ï†ÅÏù∏ ÏÑ§Î™ÖÏùÑ Ï†úÍ≥µÌïòÍ∏∞ Ïñ¥Î†µÏäµÎãàÎã§.

**Îã§ÏùåÍ≥º Í∞ôÏùÄ ÏßàÎ¨∏ÏùÑ Ìï¥Î≥¥ÏÑ∏Ïöî:**

üîπ **Í∏∞Î≥∏ ÏßÄÌëú**
- "PERÏù¥ Î≠êÏïº?"
- "PBR ÏÑ§Î™ÖÌï¥Ï§ò"
- "ROEÎûÄ Î¨¥ÏóáÏù∏Í∞ÄÏöî?"

üîπ **Ìà¨Ïûê Ï†ÑÎûµ**
- "Î∂ÑÏÇ∞Ìà¨ÏûêÎûÄ?"
- "Í∏∞Ïà†Ï†Å Î∂ÑÏÑùÏù¥ Î≠êÏïº?"
- "Î∞∏Î•ò Ìà¨ÏûêÎûÄ?"

üîπ **Í∏∞Î≥∏ Í∞úÎÖê**
- "Ï£ºÏãùÏù¥ Î≠êÏïº?"
- "Î∞∞ÎãπÏù¥ÎûÄ?"
- "ÏãúÍ∞ÄÏ¥ùÏï°Ïù¥ Î≠êÏïº?"

**Îçî Íµ¨Ï≤¥Ï†ÅÏù∏ ÏßàÎ¨∏ÏùÑ Ìï¥Ï£ºÏãúÎ©¥ Ï†ïÌôïÌïú ÎãµÎ≥ÄÏùÑ ÎìúÎ¶¥ Ïàò ÏûàÏäµÎãàÎã§!**"""

